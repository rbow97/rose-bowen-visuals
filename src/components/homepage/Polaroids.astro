---
import Image from "../Image.astro";

const images = [
  { src: "/images/me/purple-rose.JPG", caption: "Serving" },
  { src: "/images/me/rose-and-jenny.png", caption: "Me and Jenny <3" },
  {
    src: "/images/me/rose-in-edinburgh.jpeg",
    caption: "On top of the world!!",
  },
  { src: "/images/me/rose-and-catherine.jpeg", caption: "Me and Catherine" },
];
---

<section aria-label="polaroids" id="polaroids">
  <div
    class="flex md:h-[calc(1.4*33vw)] h-[calc(1.7*50vw)] pb-[40px] mt-[20px] items-end justify-center md:max-w-[calc(100%_-_40px)] md:mx-auto lg:max-w-7xl lg:px-[20px] -mx-20"
  >
    {
      images.map((image, index) => (
        <div
          class="polaroid relative w-1/2 md:w-1/3 aspect-[1/1.2] bg-primary-white rounded-md md:rounded-xl shadow-lg overflow-hidden transform transition-all ease-primary duration-700 group hover:z-[2]"
          data-index={index}
        >
          <div class="p-1.5 md:p-4 pb-[20px] md:pb-[52px] h-full relative">
            <Image
              src={image.src}
              href="/"
              caption={image.caption}
              class="w-full h-full object-cover"
            />
            <div class="absolute h-[20px] md:h-[52px] bottom-0 left-0 right-0 text-primary-white font-semibold text-[10px] md:text-[14px] flex items-center justify-center p-2 md:p-4 transition-opacity duration-300">
              <p class="reveal-animation overflow-hidden whitespace-nowrap">
                {image.caption}
              </p>
            </div>
          </div>
        </div>
      ))
    }
  </div>
</section>

<style>
  .aspect-[1/1.2] {
    aspect-ratio: 1 / 1.2;
  }

  .reveal-animation {
    position: relative;
    display: inline-block;
  }

  .reveal-animation::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    background-color: white;
    transform-origin: right;
    transform: scaleX(1);
    transition: transform 750ms ease;
  }

  .group:hover .reveal-animation::before {
    transform: scaleX(0);
  }
</style>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  const polaroids = document.querySelectorAll(".polaroid");
  const isMobile = window.innerWidth < 768;

  const rotations = [
    { rotate: -9, x: 16, y: -16, z: 1 },
    { rotate: 0, x: 0, y: 0, z: 2 },
    { rotate: 9, x: -24, y: isMobile ? -64 : -128, z: 1 },
    { rotate: -4, x: -40, y: 0, z: 2 },
  ];

  // Set initial state for all polaroids
  polaroids.forEach((polaroid, index) => {
    const rotation = rotations[index];
    gsap.set(polaroid, {
      rotation: rotation.rotate,
      x: rotation.x,
      y: 50, // Start below the viewport
      zIndex: rotation.z,
      opacity: 0,
    });
  });

  // Create a timeline for the entrance animations
  const tl = gsap.timeline({
    scrollTrigger: {
      trigger: "#polaroids",
      start: "top 70%",
      end: "bottom 20%",
      toggleActions: "play none none none",
    },
  });

  // Add each polaroid to the timeline
  polaroids.forEach((polaroid, index) => {
    const rotation = rotations[index];
    tl.to(
      polaroid,
      {
        y: rotation.y, // Animate to final y position
        opacity: 1,
        duration: 1,
        ease: "power3.out",
      },
      index * 0.5
    ); // 0.5 second delay between each polaroid
  });

  // Modify the hover event listeners
  polaroids.forEach((polaroid, index) => {
    const rotation = rotations[index];

    polaroid.addEventListener("mouseenter", () => {
      gsap.to(polaroid, {
        y: rotation.y - 10, // Move 10px upwards from its current position
        zIndex: 10,
        duration: 0.2,
        ease: "power2.out",
      });
    });

    polaroid.addEventListener("mouseleave", () => {
      gsap.to(polaroid, {
        y: rotation.y, // Return to original y position
        zIndex: rotation.z,
        duration: 0.2,
        ease: "power2.out",
      });
    });
  });
</script>
