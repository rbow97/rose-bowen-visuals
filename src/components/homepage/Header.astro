---
import Button from "../Button.astro";
import { InstagramIcon } from "../icons/InstagramIcon";
import { LinkedInIcon } from "../icons/LinkedInIcon";
import { ThemeButton } from "../ThemeButton";

const menuItems = [
  { href: "/", label: "Rose Bowen" },
  { href: "/#info", label: "Info" },
  { href: "/#work", label: "Work" },
];
---

<header
  class="sticky z-20 top-0 pt-4 md:pt-8 w-[calc(100%_-_40px)] left-5 right-5 flex justify-between"
>
  <div class="w-full flex items-center md:justify-start justify-between">
    <nav>
      <ul class="flex md:gap-4 gap-3">
        {
          menuItems.map((item) => (
            <li class="menu-item">
              <a href={item.href}>
                <Button>{item.label}</Button>
              </a>
            </li>
          ))
        }
      </ul>
    </nav>
    <button
      aria-label="Change the colour theme"
      class="ml-4 theme-button menu-item"
      id="colourThemeButton"
    >
      <ThemeButton id="theme-button-svg" />
    </button>
  </div>
  <div class="gap-4 items-center md:flex hidden">
    <a
      href="https://www.linkedin.com/in/rose-bowen-867a72198/"
      class="menu-item"
      aria-label="LinkedIn"
    >
      <LinkedInIcon color="#4CFFF4" />
    </a>
    <!-- <a href="" class="menu-item" aria-label="Instagram">
      <InstagramIcon color="#4CFFF4" />
    </a> -->
  </div>
</header>

<style>
  .theme-button-svg {
    transition: transform 0.3s ease;
    transform: rotate(var(--rotation, 0deg));
  }

  .menu-item {
    opacity: 0;
    transform: translateY(-20px);
  }
</style>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  const themeButton = document.getElementById("colourThemeButton");
  const themeButtonSvg = document.getElementById("theme-button-svg");
  const themes = ["theme-default", "theme-blue", "theme-pink", "theme-orange"];

  let currentThemeIndex = parseInt(localStorage.getItem("themeIndex") || "0");
  let hasAnimatedNavbar = false;

  document.body.classList.add(themes[currentThemeIndex]);

  if (themeButton) {
    themeButton.addEventListener("click", cycleTheme);
  }

  // Listen for the loadingComplete event
  document.addEventListener("loadingComplete", () => {
    animateMenuItems();
    setupThemeButtonRotation();
    setupThemeButtonHover();
  });

  function setupThemeButtonRotation() {
    if (themeButtonSvg) {
      gsap.to(themeButtonSvg, {
        rotation: 360,
        ease: "none",
        scrollTrigger: {
          trigger: document.body,
          start: "top top",
          end: "bottom bottom",
          scrub: 0.1,
        },
      });
    }
  }

  function setupThemeButtonHover() {
    if (themeButtonSvg) {
      themeButtonSvg.addEventListener("mouseenter", () => {
        gsap.to(themeButtonSvg, {
          scale: 1.1,
          duration: 0.3,
          ease: "power2.out",
          overwrite: "auto",
        });
      });
      themeButtonSvg.addEventListener("mouseleave", () => {
        gsap.to(themeButtonSvg, {
          scale: 1,
          duration: 0.3,
          ease: "power2.out",
          overwrite: "auto",
        });
      });
    }
  }

  function animateMenuItems() {
    if (hasAnimatedNavbar) return;

    const menuItems = document.querySelectorAll(".menu-item");
    menuItems.forEach((item, index) => {
      gsap.fromTo(
        item,
        { opacity: 0, y: -20 },
        {
          opacity: 1,
          y: 0,
          duration: 3,
          ease: "power3.out",
          delay: index * 0.1,
        }
      );
    });

    hasAnimatedNavbar = true;
  }

  function cycleTheme() {
    const body = document.body;
    body.classList.remove(themes[currentThemeIndex]);
    currentThemeIndex = (currentThemeIndex + 1) % themes.length;
    body.classList.add(themes[currentThemeIndex]);
    localStorage.setItem("themeIndex", currentThemeIndex.toString());
  }
</script>
